// <auto-generated />
using System;
using Api.Security.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Api.Security.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Api.Security.Database.Model.AccessToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("MultipleUseCount")
                        .HasColumnType("int");

                    b.Property<string>("Token")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("TokenExpire")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("AccessTokens");
                });

            modelBuilder.Entity("Api.Security.Database.Model.Client", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Type")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("Clients");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "",
                            Name = "Windows Desktop",
                            Type = "desktop/win32"
                        },
                        new
                        {
                            Id = 2,
                            Description = "",
                            Name = "MAC Desktop",
                            Type = "desktop/macx"
                        },
                        new
                        {
                            Id = 3,
                            Description = "",
                            Name = "Linux Desktop",
                            Type = "desktop/linux"
                        },
                        new
                        {
                            Id = 4,
                            Description = "",
                            Name = "Android Mobile",
                            Type = "mobile/android"
                        },
                        new
                        {
                            Id = 5,
                            Description = "",
                            Name = "IOS Mobile",
                            Type = "mobile/ios"
                        },
                        new
                        {
                            Id = 6,
                            Description = "",
                            Name = "Windows Mobile",
                            Type = "mobile/win32"
                        },
                        new
                        {
                            Id = 7,
                            Description = "",
                            Name = "Chrome Browser",
                            Type = "browser/chrome"
                        },
                        new
                        {
                            Id = 8,
                            Description = "",
                            Name = "Edge Browser",
                            Type = "browser/edge"
                        },
                        new
                        {
                            Id = 9,
                            Description = "",
                            Name = "Firefox Browser",
                            Type = "browser/firefox"
                        });
                });

            modelBuilder.Entity("Api.Security.Database.Model.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("FullName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Password")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Username")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FullName = "Ahmet İhsan Çelik",
                            Password = "1",
                            Username = "ihsancelik"
                        },
                        new
                        {
                            Id = 2,
                            FullName = "Test User",
                            Password = "1",
                            Username = "test"
                        });
                });

            modelBuilder.Entity("Api.Security.Database.Model.UserToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AccessTokenId")
                        .HasColumnType("int");

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AccessTokenId");

                    b.HasIndex("ClientId");

                    b.HasIndex("UserId");

                    b.ToTable("UserTokens");
                });

            modelBuilder.Entity("Api.Security.Database.Model.UserToken", b =>
                {
                    b.HasOne("Api.Security.Database.Model.AccessToken", "AccessToken")
                        .WithMany("UserTokens")
                        .HasForeignKey("AccessTokenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Api.Security.Database.Model.Client", "Client")
                        .WithMany("UserTokens")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Api.Security.Database.Model.User", "User")
                        .WithMany("UserTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
